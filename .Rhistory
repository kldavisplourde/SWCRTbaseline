KDD <- read.csv("/Users/kdavis07/Dropbox/SW-CRT Methods Development/2_CoPrimary/RCode/coprimary_CRT_Yang/Primary outcome_K-DPP trial.csv")
View(KDD)
View(KDD)
lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
library(nlme)
library(mvtnorm)
library(numDeriv)
lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme(sysbp2~arms0,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme(sysbp2~arms0,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE),na.action="na.exclude")
EM.estim(data = KDD, lme.baseline, lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV.R")
EM.estim(data = KDD, lme.baseline, lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
lme.baseline<-lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme.endline<-lme(sysbp2~arms0,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE),na.action="na.exclude")
EM.estim(data = KDD, lme.baseline, lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
lme(sysbp0~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, lme.baseline, lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme(sysbp2~arms0,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE),na.action="na.exclude")
lme.baseline<-lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme.endline<-lme(sysbp2~arms0,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE),na.action="na.exclude")
lme.baseline<-lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme.endline<-lme(sysbp2~arms0,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE),na.action="na.exclude")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
findbars(formula(fm1))
fm1
fm1
findbars(formula(fm1))
model.frame(subbars(fm1),data=data)
t(mkReTrms(bar.f,mf,reorder.terms=FALSE)$Zt)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV.R")
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
mfX1 <- model.frame(TermsX1, data = data)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
Yj
j
X[ID == j,,drop=FALSE]
beta1
Xj%*%beta1
Xj
beta1
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
Yj
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
X2
View(KDD)
KDD$arm <- ifelse(KDD$arms0=="Control",0,1)
View(KDD)
lme.baseline<-lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme.endline<-lme(sysbp2~arm,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE),na.action="na.exclude")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
X2
X2[ID == j,,drop=FALSE]
j
X2
X1
X2
Y
View(KDD)
lme.endline<-lme(sysbp2~arm,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE),na.action="na.omit")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
X2[ID == j,,drop=FALSE]
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
View(KDD)
KDD$sysbp2
KDD$sysbp0
KDD$sysbp2
is.na(KDD$sysbp2)
KDD$sysbp2<-ifelse(is.na(KDD$sysbp2)=="FALSE",KDD$sysbp2,mean(KDD$sysbp2,na.action="na.exclude"))
KDD$sysbp2<-ifelse(is.na(KDD$sysbp2)=="FALSE",KDD$sysbp2,mean(KDD$sysbp2,na.action="na.exclude"))
lme.baseline<-lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme.endline<-lme(sysbp2~arm,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
KDD$sysbp2
mean.sbp2<-mean(KDD$sysbp2,na.action="na.exclude")
if(is.na(KDD$sysbp2)=="TRUE") {KDD$sysbp2<-mean.sbp2}
mean.sbp2<-mean(KDD$sysbp2,na.action="na.exclude")
KDD$sysbp2<-ifelse(is.na(KDD$sysbp2)=="TRUE",mean.sbp2,KDD$sysbp2)
lme.baseline<-lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme.endline<-lme(sysbp2~arm,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
mean.sbp2
mean(KDD$sysbp2,na.action="na.exclude")
mean(KDD$sysbp2)
mean.sbp2<-mean(KDD$sysbp2,na.rm=TRUE)
KDD$sysbp2<-ifelse(is.na(KDD$sysbp2)=="TRUE",mean.sbp2,KDD$sysbp2)
lme.baseline<-lme(sysbp0~1,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
lme.endline<-lme(sysbp2~arm,random=~1|cluster0,data=KDD,control=lmeControl(returnObject=TRUE))
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
X1j
beta1
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
beta2
X2j
as.numeric(fm2$coefficients$fixed)
TermsX2
fm2$terms
fm2
as.numeric(fm1$coefficients$fixed)
as.numeric(fm2$coefficients$fixed)
beta2
as.numeric(fm2$coefficients$fixed)
beta2 = as.numeric(fm2$coefficients$fixed)
beta2
(nvar+1)
(2*nvar)
theta[(nvar+1):(2*nvar+1)]
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
lme.endline
source("~/Documents/GitHub/SWCRTbaseline/EM_uncorrected_BV_HH.R")
EM.estim(data = KDD, fm1=lme.baseline, fm2=lme.endline, maxiter=500, epsilon=1e-4, verbose=FALSE)
